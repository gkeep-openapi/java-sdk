/*
 * Gkeep API
 * Gkeep API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AlertList;
import io.swagger.client.model.AlertsStatus;
import io.swagger.client.model.CreateProfile;
import io.swagger.client.model.CreateVehicleCategory;
import io.swagger.client.model.FleetStatus;
import io.swagger.client.model.FrameHistory;
import io.swagger.client.model.NotificationSettings;
import io.swagger.client.model.RefuelsList;
import io.swagger.client.model.StopppedConsumptionList;
import io.swagger.client.model.UpdateNotificationSettings;
import io.swagger.client.model.UpdateProfile;
import io.swagger.client.model.UpdateVehicle;
import io.swagger.client.model.UpdateVehicleCategory;
import io.swagger.client.model.UserLevel;
import io.swagger.client.model.UserProfile;
import io.swagger.client.model.UserProfileList;
import io.swagger.client.model.Vehicle;
import io.swagger.client.model.VehicleCategory;
import io.swagger.client.model.VehicleCategoryList;
import io.swagger.client.model.VehicleDailyStats;
import io.swagger.client.model.VehicleList;
import io.swagger.client.model.VehicleMaintenance;
import io.swagger.client.model.VehicleStatus;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for V2Api
 */
@Ignore
public class V2ApiTest {

    private final V2Api api = new V2Api();

    /**
     * 
     *
     * Create user profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserProfileTest() throws ApiException {
        CreateProfile body = null;
        UserProfile response = api.createUserProfile(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create vehicle category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createVehicleCategoryTest() throws ApiException {
        CreateVehicleCategory body = null;
        VehicleCategory response = api.createVehicleCategory(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Delete user profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserProfileTest() throws ApiException {
        Integer profileId = null;
        api.deleteUserProfile(profileId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Delete vehicle category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteVehicleCategoryTest() throws ApiException {
        Integer categoryId = null;
        api.deleteVehicleCategory(categoryId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Enable vehicle maintenance mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enableVehicleMaintenanceTest() throws ApiException {
        Integer vehicleId = null;
        VehicleMaintenance body = null;
        Vehicle response = api.enableVehicleMaintenance(vehicleId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get alerts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAlertListTest() throws ApiException {
        String filterCreatedDateStart = null;
        String filterCreatedDateEnd = null;
        Integer filterCodeSpecial = null;
        AlertList response = api.getAlertList(filterCreatedDateStart, filterCreatedDateEnd, filterCodeSpecial);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get alerts status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAlertsStatusTest() throws ApiException {
        AlertsStatus response = api.getAlertsStatus();

        // TODO: test validations
    }
    /**
     * 
     *
     * Get current user profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCurrentUserProfileTest() throws ApiException {
        UserProfile response = api.getCurrentUserProfile();

        // TODO: test validations
    }
    /**
     * 
     *
     * Get fleet status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFleetStatusTest() throws ApiException {
        FleetStatus response = api.getFleetStatus();

        // TODO: test validations
    }
    /**
     * 
     *
     * Get notification settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotificationSettingsTest() throws ApiException {
        NotificationSettings response = api.getNotificationSettings();

        // TODO: test validations
    }
    /**
     * 
     *
     * Get related user-profiles
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRelatedUserProfilesTest() throws ApiException {
        UserLevel levelName = null;
        String page = null;
        String perPage = null;
        UserProfileList response = api.getRelatedUserProfiles(levelName, page, perPage);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get user-profiles
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserProfileTest() throws ApiException {
        Integer profileId = null;
        UserProfile response = api.getUserProfile(profileId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get vehicle category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVehicleCategoryTest() throws ApiException {
        Integer categoryId = null;
        VehicleCategory response = api.getVehicleCategory(categoryId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get vehicle category list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVehicleCategoryListTest() throws ApiException {
        String page = null;
        String perPage = null;
        VehicleCategoryList response = api.getVehicleCategoryList(page, perPage);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get vehicle status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVehicleStatusTest() throws ApiException {
        Integer vehicleId = null;
        VehicleStatus response = api.getVehicleStatus(vehicleId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get vehicles
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVehiclesTest() throws ApiException {
        VehicleList response = api.getVehicles();

        // TODO: test validations
    }
    /**
     * 
     *
     * Get vehicles daily statistics
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVehiclesDailyStatsTest() throws ApiException {
        Integer vehicleId = null;
        String filtersStartedAt = null;
        String filtersEndedAt = null;
        VehicleDailyStats response = api.getVehiclesDailyStats(vehicleId, filtersStartedAt, filtersEndedAt);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get vehicles frame-history
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVehiclesFrameHistoryTest() throws ApiException {
        Integer vehicleId = null;
        String filtersStartedAt = null;
        String filtersEndedAt = null;
        String page = null;
        String perPage = null;
        FrameHistory response = api.getVehiclesFrameHistory(vehicleId, filtersStartedAt, filtersEndedAt, page, perPage);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get vehicles refuels
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVehiclesRefuelsTest() throws ApiException {
        Integer vehicleId = null;
        String filtersStartedAt = null;
        String filtersEndedAt = null;
        RefuelsList response = api.getVehiclesRefuels(vehicleId, filtersStartedAt, filtersEndedAt);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get vehicles stopped-consumptions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVehiclesStoppedConsumptionsTest() throws ApiException {
        Integer vehicleId = null;
        String filtersStartedAt = null;
        String filtersEndedAt = null;
        String page = null;
        String perPage = null;
        StopppedConsumptionList response = api.getVehiclesStoppedConsumptions(vehicleId, filtersStartedAt, filtersEndedAt, page, perPage);

        // TODO: test validations
    }
    /**
     * 
     *
     * Refresh api token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshApiTokenTest() throws ApiException {
        UserProfile response = api.refreshApiToken();

        // TODO: test validations
    }
    /**
     * 
     *
     * Update notification settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotificationSettingsTest() throws ApiException {
        UpdateNotificationSettings body = null;
        NotificationSettings response = api.updateNotificationSettings(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update user profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserProfileTest() throws ApiException {
        Integer profileId = null;
        UpdateProfile body = null;
        UserProfile response = api.updateUserProfile(profileId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update vehicle
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateVehicleTest() throws ApiException {
        Integer vehicleId = null;
        UpdateVehicle body = null;
        Vehicle response = api.updateVehicle(vehicleId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update vehicle category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateVehicleCategoryTest() throws ApiException {
        Integer categoryId = null;
        UpdateVehicleCategory body = null;
        VehicleCategory response = api.updateVehicleCategory(categoryId, body);

        // TODO: test validations
    }
}
